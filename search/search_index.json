{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is a GitOps/Declarative way of working with Veracode through configuration. The advantages of working in a GitOps style - Allows a development team to onboard themselves into Veracode in a change controlled manner. - All of your configuration is in source control, including module selection. - Modifying your Veracode configuration can occur just within the config file, no need to login to tht Veracode platform. - Either work from a single centralized configuration, or a distributed configuration accross many repositories. Usage All actions require the below parameters -f of --jsonfile __LOCATION_CONFIG_FILE__ with the location of the Declare configuration file. All actions have an optional language flag for limited Localization support. -l of --language en-GB with the location of the Declare configuration file. Supported Localizations - en-GB (Full) - de-DE (Partial)","title":"Home"},{"location":"#usage","text":"All actions require the below parameters -f of --jsonfile __LOCATION_CONFIG_FILE__ with the location of the Declare configuration file. All actions have an optional language flag for limited Localization support. -l of --language en-GB with the location of the Declare configuration file. Supported Localizations - en-GB (Full) - de-DE (Partial)","title":"Usage"},{"location":"getting_started/","text":"Getting Started","title":"Getting Started"},{"location":"actions/configure/","text":"Description Configure will create the Veracode components specified in the configuration. This currently supports creating: - Application Profile - Policy - Team - Users - Sandboxes - Mitigations Example Configuration The below configuration can be used to create a profile for the application \"Test App\". { \"application_profiles\": [ { \"policy_schedule\": \"0 0 * * *\", \"application_name\": \"Test App\", \"criticality\": \"Very High\", \"business_owner\": \"seb\", \"business_owner_email\": \"scoles@veracode.com\", \"upload\": [], \"modules\": [], \"policy\": { \"custom_severities\": [ { \"cwe\": 0, \"severity\": 0 } ], \"finding_rules\": [ { \"scan_type\": [ \"STATIC\" ], \"type\": \"FAIL_ALL\", \"value\": \"string\" } ], \"scan_frequency_rules\": [ { \"frequency\": \"NOT_REQUIRED\", \"scan_type\": \"STATIC\" } ], \"sev0_grace_period\": 0, \"sev1_grace_period\": 0, \"sev2_grace_period\": 0, \"sev3_grace_period\": 0, \"sev4_grace_period\": 0, \"sev5_grace_period\": 0 }, \"users\": [ { \"first_name\": \"Seb\", \"last_name\": \"Coles\", \"email_address\": \"scoles@veracode.com\", \"roles\": \"Creator, Any Scan\" } ], \"sandboxes\": [ { \"sandbox_name\": \"Release Candidate\" } ], \"mitigations\": [ { \"flaw_id\": \"\", \"cve_id\": \"\", \"file_name\": \"\", \"line_number\": \"\", \"link\": \"\", \"action\": \"\", \"technique\": \"\", \"specifics\": \"\", \"residual_risk\": \"\", \"verification\": \"\" } ] } ] } Usage Add the tool to your path or run from the directory containing the binary. .\\Veracode.OSS.Declare configure -f \"_LOCATION_OF_CONFIG_FILE_\" Example Output | INFO|Entering Configure with scan options {\"JsonFileLocation\":\".\\\\veracode.complete.json\"} | INFO|Starting build for Test App | INFO|Checking to see if Application Profile Test App already exists. | INFO|Application Profile Test App does not exist, adding configuration. | INFO|Application Profile Test App created succesfully. | INFO|Checking to see if policy for Test App already exists. | INFO|Policy for Test App does not exist, adding configuration. | INFO|Policy for Test App created succesfully. | INFO|Checking to see if team Test App already exists. | INFO|Team Test App does not exist, adding configuration. | INFO|Team Test App created succesfully. | INFO|Checking to see if user scoles@veracode.com already exists. | INFO|User scoles@veracode.com does not exist, adding configuration. | INFO|User scoles@veracode.com created succesfully. | INFO|Test App has no completed scans, cannot apply mitigations. | INFO|[Test App] Checking Sandboxes... | INFO|[Test App] Does not have sandbox with name Release Candidate. Creating... | INFO|[Test App] Release Candidate creation complete! | INFO|[Test App] Finished Sandboxes! | INFO|build complete for Test App | INFO|Exiting Configure with value 1 Troubleshooting","title":"Configure"},{"location":"actions/configure/#description","text":"Configure will create the Veracode components specified in the configuration. This currently supports creating: - Application Profile - Policy - Team - Users - Sandboxes - Mitigations","title":"Description"},{"location":"actions/configure/#example-configuration","text":"The below configuration can be used to create a profile for the application \"Test App\". { \"application_profiles\": [ { \"policy_schedule\": \"0 0 * * *\", \"application_name\": \"Test App\", \"criticality\": \"Very High\", \"business_owner\": \"seb\", \"business_owner_email\": \"scoles@veracode.com\", \"upload\": [], \"modules\": [], \"policy\": { \"custom_severities\": [ { \"cwe\": 0, \"severity\": 0 } ], \"finding_rules\": [ { \"scan_type\": [ \"STATIC\" ], \"type\": \"FAIL_ALL\", \"value\": \"string\" } ], \"scan_frequency_rules\": [ { \"frequency\": \"NOT_REQUIRED\", \"scan_type\": \"STATIC\" } ], \"sev0_grace_period\": 0, \"sev1_grace_period\": 0, \"sev2_grace_period\": 0, \"sev3_grace_period\": 0, \"sev4_grace_period\": 0, \"sev5_grace_period\": 0 }, \"users\": [ { \"first_name\": \"Seb\", \"last_name\": \"Coles\", \"email_address\": \"scoles@veracode.com\", \"roles\": \"Creator, Any Scan\" } ], \"sandboxes\": [ { \"sandbox_name\": \"Release Candidate\" } ], \"mitigations\": [ { \"flaw_id\": \"\", \"cve_id\": \"\", \"file_name\": \"\", \"line_number\": \"\", \"link\": \"\", \"action\": \"\", \"technique\": \"\", \"specifics\": \"\", \"residual_risk\": \"\", \"verification\": \"\" } ] } ] }","title":"Example Configuration"},{"location":"actions/configure/#usage","text":"Add the tool to your path or run from the directory containing the binary. .\\Veracode.OSS.Declare configure -f \"_LOCATION_OF_CONFIG_FILE_\"","title":"Usage"},{"location":"actions/configure/#example-output","text":"| INFO|Entering Configure with scan options {\"JsonFileLocation\":\".\\\\veracode.complete.json\"} | INFO|Starting build for Test App | INFO|Checking to see if Application Profile Test App already exists. | INFO|Application Profile Test App does not exist, adding configuration. | INFO|Application Profile Test App created succesfully. | INFO|Checking to see if policy for Test App already exists. | INFO|Policy for Test App does not exist, adding configuration. | INFO|Policy for Test App created succesfully. | INFO|Checking to see if team Test App already exists. | INFO|Team Test App does not exist, adding configuration. | INFO|Team Test App created succesfully. | INFO|Checking to see if user scoles@veracode.com already exists. | INFO|User scoles@veracode.com does not exist, adding configuration. | INFO|User scoles@veracode.com created succesfully. | INFO|Test App has no completed scans, cannot apply mitigations. | INFO|[Test App] Checking Sandboxes... | INFO|[Test App] Does not have sandbox with name Release Candidate. Creating... | INFO|[Test App] Release Candidate creation complete! | INFO|[Test App] Finished Sandboxes! | INFO|build complete for Test App | INFO|Exiting Configure with value 1","title":"Example Output"},{"location":"actions/configure/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"actions/delete/","text":"Description Delete will delete all the Veracode components specified in the configuration file. This is useful for tearing down environments or offboarding applications. Usage delete -f \"_LOCATION_OF_CONFIG_FILE_\" Example Output | INFO|Entering Delete with scan options {\"JsonFileLocation\":\".\\\\veracode.complete.json\"} | INFO|Tearing down Test App | INFO|Checking if profile exists. | INFO|Deleting profile. | INFO|Profile deleted. | INFO|Checking if policy exists. | INFO|Deleting policy. | INFO|Policy deleted. | INFO|Checking if team exists. | INFO|Deleting team. | INFO|Team deleted. | INFO|Checking if user exists. | INFO|User deleted. | INFO|Tear down complete for Test App | INFO|Exiting Delete with value 1","title":"Delete"},{"location":"actions/delete/#description","text":"Delete will delete all the Veracode components specified in the configuration file. This is useful for tearing down environments or offboarding applications.","title":"Description"},{"location":"actions/delete/#usage","text":"delete -f \"_LOCATION_OF_CONFIG_FILE_\"","title":"Usage"},{"location":"actions/delete/#example-output","text":"| INFO|Entering Delete with scan options {\"JsonFileLocation\":\".\\\\veracode.complete.json\"} | INFO|Tearing down Test App | INFO|Checking if profile exists. | INFO|Deleting profile. | INFO|Profile deleted. | INFO|Checking if policy exists. | INFO|Deleting policy. | INFO|Policy deleted. | INFO|Checking if team exists. | INFO|Deleting team. | INFO|Team deleted. | INFO|Checking if user exists. | INFO|User deleted. | INFO|Tear down complete for Test App | INFO|Exiting Delete with value 1","title":"Example Output"},{"location":"actions/evaluate/","text":"Description Evaluate will check the scan run status and compliance status of your policy and sandboxes. Usage evaluate -f \"_LOCATION_OF_CONFIG_FILE_\" Evaluate only uses the application profile name in your configuration file. Using a basic configuration such as below is all you need for this command. { \"application_profiles\": [ { \"application_name\": \"Test App\" } ] } Example Output [Test App][Policy][Scan Status] Results Ready [Test App][Policy][Compliance Status] Did Not Pass [Test App][Sandbox Seb Coles's Sandbox][Scan Status] There are no scans!","title":"Evaluate"},{"location":"actions/evaluate/#description","text":"Evaluate will check the scan run status and compliance status of your policy and sandboxes.","title":"Description"},{"location":"actions/evaluate/#usage","text":"evaluate -f \"_LOCATION_OF_CONFIG_FILE_\" Evaluate only uses the application profile name in your configuration file. Using a basic configuration such as below is all you need for this command. { \"application_profiles\": [ { \"application_name\": \"Test App\" } ] }","title":"Usage"},{"location":"actions/evaluate/#example-output","text":"[Test App][Policy][Scan Status] Results Ready [Test App][Policy][Compliance Status] Did Not Pass [Test App][Sandbox Seb Coles's Sandbox][Scan Status] There are no scans!","title":"Example Output"},{"location":"actions/mitigation/","text":"Description Mitigations helps generate the configuration required to include mitigations in your veracode configuration. It will generate the template with the flaw details, you will need to include the TSRV and ideally a link to the code in your repo for review by your security team. The policyonly will only return open flaws that are breaking compliance. Usage Add the tool to your path or run from the directory containing the binary. .\\Veracode.OSS.Declare mitigation -f \"_LOCATION_OF_CONFIG_FILE_\" If you only want templates to the flaws that break policy, use the --policyonly flag .\\Veracode.OSS.Declare mitigation --policyonly -f \"_LOCATION_OF_CONFIG_FILE_\" You can then copy the output of this tool to your Declare configuraiton file. The mitigations will then be applied via the configure command. Example Output | INFO|Scan options are {\"PolicyOnly\":true,\"JsonFileLocation\":\".\\\\veracode.complete.json\",\"Language\":\"en-GB\"} | INFO|Generating mitigations templates for Test App | INFO|\"mitigations\":[ { \"flaw_id\": \"18\", \"cwe_id\": \"78\", \"file_name\": \"ToolsController.java\", \"line_number\": \"56\", \"link\": \"__ADD_A_REPOSITORY_LINK__\", \"action\": \"fp || appdesign || osenv || netenv\", \"technique\": \"__ENTER_TECHNIQUES__\", \"specifics\": \"__ENTER_SPECIFICS__\", \"remaining_risk\": \"__ENTER_REMAINING_RISK__\", \"verification\": \"__ENTER_VERIFICATION__\" } ...omitted for brevity { \"flaw_id\": \"44\", \"cwe_id\": \"78\", \"file_name\": \"ToolsController.java\", \"line_number\": \"59\", \"link\": \"__ADD_A_REPOSITORY_LINK__\", \"action\": \"fp || appdesign || osenv || netenv\", \"technique\": \"__ENTER_TECHNIQUES__\", \"specifics\": \"__ENTER_SPECIFICS__\", \"remaining_risk\": \"__ENTER_REMAINING_RISK__\", \"verification\": \"__ENTER_VERIFICATION__\" }] | INFO|Generated mitigations templates for Test App Troubleshooting","title":"Mitigation"},{"location":"actions/mitigation/#description","text":"Mitigations helps generate the configuration required to include mitigations in your veracode configuration. It will generate the template with the flaw details, you will need to include the TSRV and ideally a link to the code in your repo for review by your security team. The policyonly will only return open flaws that are breaking compliance.","title":"Description"},{"location":"actions/mitigation/#usage","text":"Add the tool to your path or run from the directory containing the binary. .\\Veracode.OSS.Declare mitigation -f \"_LOCATION_OF_CONFIG_FILE_\" If you only want templates to the flaws that break policy, use the --policyonly flag .\\Veracode.OSS.Declare mitigation --policyonly -f \"_LOCATION_OF_CONFIG_FILE_\" You can then copy the output of this tool to your Declare configuraiton file. The mitigations will then be applied via the configure command.","title":"Usage"},{"location":"actions/mitigation/#example-output","text":"| INFO|Scan options are {\"PolicyOnly\":true,\"JsonFileLocation\":\".\\\\veracode.complete.json\",\"Language\":\"en-GB\"} | INFO|Generating mitigations templates for Test App | INFO|\"mitigations\":[ { \"flaw_id\": \"18\", \"cwe_id\": \"78\", \"file_name\": \"ToolsController.java\", \"line_number\": \"56\", \"link\": \"__ADD_A_REPOSITORY_LINK__\", \"action\": \"fp || appdesign || osenv || netenv\", \"technique\": \"__ENTER_TECHNIQUES__\", \"specifics\": \"__ENTER_SPECIFICS__\", \"remaining_risk\": \"__ENTER_REMAINING_RISK__\", \"verification\": \"__ENTER_VERIFICATION__\" } ...omitted for brevity { \"flaw_id\": \"44\", \"cwe_id\": \"78\", \"file_name\": \"ToolsController.java\", \"line_number\": \"59\", \"link\": \"__ADD_A_REPOSITORY_LINK__\", \"action\": \"fp || appdesign || osenv || netenv\", \"technique\": \"__ENTER_TECHNIQUES__\", \"specifics\": \"__ENTER_SPECIFICS__\", \"remaining_risk\": \"__ENTER_REMAINING_RISK__\", \"verification\": \"__ENTER_VERIFICATION__\" }] | INFO|Generated mitigations templates for Test App","title":"Example Output"},{"location":"actions/mitigation/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"actions/scan/","text":"Description Scan will run through the same test verification, bit will then continue to run a full policy static scan if the schedule requires it. The schedule is a CRON schedule, when this action is run it will check to see if the last succesfully completed scan occured within the shcedule. If so, the scan is skipped. This check can be skipped by using the -i or --ignore_schedule parameters. Example The below configuration has valid module configuration and will run a complete scan. { \"application_profiles\": [ { \"policy_schedule\": \"0 0 * * *\", \"application_name\": \"Test App\", \"criticality\": \"Very High\", \"business_owner\": \"seb\", \"business_owner_email\": \"scoles@veracode.com\", \"upload\": [ { \"location\": \"Assets/verademo.war\" } ], \"modules\": [ { \"module_name\": \"verademo.war\", \"entry_point\": \"true\" }, { \"module_name\": \"JS files within verademo.war\", \"entry_point\": \"true\" } ], \"policy\": { \"custom_severities\": [ { \"cwe\": 0, \"severity\": 0 } ], \"finding_rules\": [ { \"scan_type\": [ \"STATIC\" ], \"type\": \"FAIL_ALL\", \"value\": \"string\" } ], \"scan_frequency_rules\": [ { \"frequency\": \"NOT_REQUIRED\", \"scan_type\": \"STATIC\" } ], \"sev0_grace_period\": 0, \"sev1_grace_period\": 0, \"sev2_grace_period\": 0, \"sev3_grace_period\": 0, \"sev4_grace_period\": 0, \"sev5_grace_period\": 0 }, \"users\": [ { \"first_name\": \"Seb\", \"last_name\": \"Coles\", \"email_address\": \"scoles@veracode.com\", \"roles\": \"Creator, Any Scan\" } ], \"sandboxes\": [ { \"sandbox_name\": \"Release Candidate\" } ], \"mitigations\": [] } ] } Usage Add the tool to your path or run from the directory containing the binary. .\\Veracode.OSS.Declare scan -f \"_LOCATION_OF_CONFIG_FILE_\" Example Output","title":"Scan"},{"location":"actions/scan/#description","text":"Scan will run through the same test verification, bit will then continue to run a full policy static scan if the schedule requires it. The schedule is a CRON schedule, when this action is run it will check to see if the last succesfully completed scan occured within the shcedule. If so, the scan is skipped. This check can be skipped by using the -i or --ignore_schedule parameters.","title":"Description"},{"location":"actions/scan/#example","text":"The below configuration has valid module configuration and will run a complete scan. { \"application_profiles\": [ { \"policy_schedule\": \"0 0 * * *\", \"application_name\": \"Test App\", \"criticality\": \"Very High\", \"business_owner\": \"seb\", \"business_owner_email\": \"scoles@veracode.com\", \"upload\": [ { \"location\": \"Assets/verademo.war\" } ], \"modules\": [ { \"module_name\": \"verademo.war\", \"entry_point\": \"true\" }, { \"module_name\": \"JS files within verademo.war\", \"entry_point\": \"true\" } ], \"policy\": { \"custom_severities\": [ { \"cwe\": 0, \"severity\": 0 } ], \"finding_rules\": [ { \"scan_type\": [ \"STATIC\" ], \"type\": \"FAIL_ALL\", \"value\": \"string\" } ], \"scan_frequency_rules\": [ { \"frequency\": \"NOT_REQUIRED\", \"scan_type\": \"STATIC\" } ], \"sev0_grace_period\": 0, \"sev1_grace_period\": 0, \"sev2_grace_period\": 0, \"sev3_grace_period\": 0, \"sev4_grace_period\": 0, \"sev5_grace_period\": 0 }, \"users\": [ { \"first_name\": \"Seb\", \"last_name\": \"Coles\", \"email_address\": \"scoles@veracode.com\", \"roles\": \"Creator, Any Scan\" } ], \"sandboxes\": [ { \"sandbox_name\": \"Release Candidate\" } ], \"mitigations\": [] } ] }","title":"Example"},{"location":"actions/scan/#usage","text":"Add the tool to your path or run from the directory containing the binary. .\\Veracode.OSS.Declare scan -f \"_LOCATION_OF_CONFIG_FILE_\"","title":"Usage"},{"location":"actions/scan/#example-output","text":"","title":"Example Output"},{"location":"actions/test/","text":"Description Test will initiate a Veracode prescan and check to see if your scan configuration is valid. The crux to this is making sure module selection is part of the pull request process. Module selection is the biggest challenge with Veracode, it is easy to get wrong. I hope this way of working helps people make a correct module selection. If your scan configuration fails the test, the tool will print out what module selection is missing from your configuration. Example In-Complete Configuration The below configuration does not have a completed module selection. The test will fail and provide the expected modules configuration. { \"application_profiles\": [ { \"policy_schedule\": \"0 0 * * *\", \"application_name\": \"Test App\", \"criticality\": \"Very High\", \"business_owner\": \"seb\", \"business_owner_email\": \"scoles@veracode.com\", \"upload\": [ { \"location\": \"Assets/verademo.war\" } ], \"modules\": [], \"policy\": { \"custom_severities\": [ { \"cwe\": 0, \"severity\": 0 } ], \"finding_rules\": [ { \"scan_type\": [ \"STATIC\" ], \"type\": \"FAIL_ALL\", \"value\": \"string\" } ], \"scan_frequency_rules\": [ { \"frequency\": \"NOT_REQUIRED\", \"scan_type\": \"STATIC\" } ], \"sev0_grace_period\": 0, \"sev1_grace_period\": 0, \"sev2_grace_period\": 0, \"sev3_grace_period\": 0, \"sev4_grace_period\": 0, \"sev5_grace_period\": 0 }, \"users\": [ { \"first_name\": \"Seb\", \"last_name\": \"Coles\", \"email_address\": \"scoles@veracode.com\", \"roles\": \"Creator, Any Scan\" } ], \"sandboxes\": [ { \"sandbox_name\": \"Release Candidate\" } ], \"mitigations\": [] } ] } Usage Add the tool to your path or run from the directory containing the binary. .\\Veracode.OSS.Declare test -f \"_LOCATION_OF_CONFIG_FILE_\" Example Output for In-Complete Configuration | INFO|Entering Test with scan options {\"LastScan\":false,\"JsonFileLocation\":\".\\\\veracode.incomplete.json\"} | INFO|Testing configuration for Test App | INFO|Testing against a new scan | INFO|New scan created with Build Id ********. Uploading files | INFO|Uploading Assets/verademo.war to scan ********. | INFO|Upload of Assets/verademo.war complete. | INFO|Scan ******** is still running and has been running for 00:00:01.79. | INFO|Scan ******** is still running and has been running for 00:00:23.89. | INFO|Scan ******** is still running and has been running for 00:00:45.99. | INFO|Scan ******** is still running and has been running for 00:01:08.29. | INFO|Scan complete for ******** and took 00:01:30.28. | WARN|There are 2 modules from prescan that do not match the config. | WARN|Please include and complete the below configuration and add to your .json file | INFO|\"modules\":[ { \"module_name\":\"verademo.war\" ,\"entry_point\":\"true\"}, { \"module_name\":\"JS files within verademo.war\" ,\"entry_point\":\"true\"} ] | WARN|PRE SCAN ERRORS: verademo.war:No supporting files or PDB files | WARN|PRE SCAN ERRORS: JS files within verademo.war:No supporting files or PDB files | WARN|Module selection configuration was incorrect for ********. | INFO|Test Finished. Deleting Build Id ********. | INFO|Scan does not conform. Deleting Build Id ********. | WARN|Application Test App scan config DOES NOT conforms. | INFO|Scan Configuration testing complete. | INFO|Exiting Test with value 1 Example Complete Configuration The below configuration now has a valid module configuration so the test will pass. { \"application_profiles\": [ { \"policy_schedule\": \"0 0 * * *\", \"application_name\": \"Test App\", \"criticality\": \"Very High\", \"business_owner\": \"seb\", \"business_owner_email\": \"scoles@veracode.com\", \"upload\": [ { \"location\": \"Assets/verademo.war\" } ], \"modules\": [ { \"module_name\": \"verademo.war\", \"entry_point\": \"true\" }, { \"module_name\": \"JS files within verademo.war\", \"entry_point\": \"true\" } ], \"policy\": { \"custom_severities\": [ { \"cwe\": 0, \"severity\": 0 } ], \"finding_rules\": [ { \"scan_type\": [ \"STATIC\" ], \"type\": \"FAIL_ALL\", \"value\": \"string\" } ], \"scan_frequency_rules\": [ { \"frequency\": \"NOT_REQUIRED\", \"scan_type\": \"STATIC\" } ], \"sev0_grace_period\": 0, \"sev1_grace_period\": 0, \"sev2_grace_period\": 0, \"sev3_grace_period\": 0, \"sev4_grace_period\": 0, \"sev5_grace_period\": 0 }, \"users\": [ { \"first_name\": \"Seb\", \"last_name\": \"Coles\", \"email_address\": \"scoles@veracode.com\", \"roles\": \"Creator, Any Scan\" } ], \"sandboxes\": [ { \"sandbox_name\": \"Release Candidate\" } ], \"mitigations\": [] } ] } Example Output for In-Complete Configuration | INFO|Entering Test with scan options {\"LastScan\":false,\"JsonFileLocation\":\".\\\\veracode.complete.json\"} | INFO|Testing configuration for Test App | INFO|Testing against a new scan | INFO|New scan created with Build Id ********. Uploading files | INFO|Uploading Assets/verademo.war to scan ********. | INFO|Upload of Assets/verademo.war complete. | INFO|Scan ******** is still running and has been running for 00:00:02.34. | INFO|Scan ******** is still running and has been running for 00:00:23.83. | INFO|Scan ******** is still running and has been running for 00:00:45.69. | INFO|Scan ******** is still running and has been running for 00:01:07.37. | INFO|Scan ******** is still running and has been running for 00:01:29.26. | INFO|Scan ******** is still running and has been running for 00:01:50.99. | INFO|Scan complete for ******** and took 00:02:12.72. | WARN|PRE SCAN ERRORS: verademo.war:No supporting files or PDB files | WARN|PRE SCAN ERRORS: JS files within verademo.war:No supporting files or PDB files | INFO|Module selection conforms for ******** and the scan can commence. | INFO|Test Finished. Deleting Build Id ********. | INFO|Configuration conforms. | INFO|Application Test App scan config DOES conforms. | INFO|Scan Configuration testing complete. | INFO|Exiting Test with value 1","title":"Test"},{"location":"actions/test/#description","text":"Test will initiate a Veracode prescan and check to see if your scan configuration is valid. The crux to this is making sure module selection is part of the pull request process. Module selection is the biggest challenge with Veracode, it is easy to get wrong. I hope this way of working helps people make a correct module selection. If your scan configuration fails the test, the tool will print out what module selection is missing from your configuration.","title":"Description"},{"location":"actions/test/#example-in-complete-configuration","text":"The below configuration does not have a completed module selection. The test will fail and provide the expected modules configuration. { \"application_profiles\": [ { \"policy_schedule\": \"0 0 * * *\", \"application_name\": \"Test App\", \"criticality\": \"Very High\", \"business_owner\": \"seb\", \"business_owner_email\": \"scoles@veracode.com\", \"upload\": [ { \"location\": \"Assets/verademo.war\" } ], \"modules\": [], \"policy\": { \"custom_severities\": [ { \"cwe\": 0, \"severity\": 0 } ], \"finding_rules\": [ { \"scan_type\": [ \"STATIC\" ], \"type\": \"FAIL_ALL\", \"value\": \"string\" } ], \"scan_frequency_rules\": [ { \"frequency\": \"NOT_REQUIRED\", \"scan_type\": \"STATIC\" } ], \"sev0_grace_period\": 0, \"sev1_grace_period\": 0, \"sev2_grace_period\": 0, \"sev3_grace_period\": 0, \"sev4_grace_period\": 0, \"sev5_grace_period\": 0 }, \"users\": [ { \"first_name\": \"Seb\", \"last_name\": \"Coles\", \"email_address\": \"scoles@veracode.com\", \"roles\": \"Creator, Any Scan\" } ], \"sandboxes\": [ { \"sandbox_name\": \"Release Candidate\" } ], \"mitigations\": [] } ] }","title":"Example In-Complete Configuration"},{"location":"actions/test/#usage","text":"Add the tool to your path or run from the directory containing the binary. .\\Veracode.OSS.Declare test -f \"_LOCATION_OF_CONFIG_FILE_\"","title":"Usage"},{"location":"actions/test/#example-output-for-in-complete-configuration","text":"| INFO|Entering Test with scan options {\"LastScan\":false,\"JsonFileLocation\":\".\\\\veracode.incomplete.json\"} | INFO|Testing configuration for Test App | INFO|Testing against a new scan | INFO|New scan created with Build Id ********. Uploading files | INFO|Uploading Assets/verademo.war to scan ********. | INFO|Upload of Assets/verademo.war complete. | INFO|Scan ******** is still running and has been running for 00:00:01.79. | INFO|Scan ******** is still running and has been running for 00:00:23.89. | INFO|Scan ******** is still running and has been running for 00:00:45.99. | INFO|Scan ******** is still running and has been running for 00:01:08.29. | INFO|Scan complete for ******** and took 00:01:30.28. | WARN|There are 2 modules from prescan that do not match the config. | WARN|Please include and complete the below configuration and add to your .json file | INFO|\"modules\":[ { \"module_name\":\"verademo.war\" ,\"entry_point\":\"true\"}, { \"module_name\":\"JS files within verademo.war\" ,\"entry_point\":\"true\"} ] | WARN|PRE SCAN ERRORS: verademo.war:No supporting files or PDB files | WARN|PRE SCAN ERRORS: JS files within verademo.war:No supporting files or PDB files | WARN|Module selection configuration was incorrect for ********. | INFO|Test Finished. Deleting Build Id ********. | INFO|Scan does not conform. Deleting Build Id ********. | WARN|Application Test App scan config DOES NOT conforms. | INFO|Scan Configuration testing complete. | INFO|Exiting Test with value 1","title":"Example Output for In-Complete Configuration"},{"location":"actions/test/#example-complete-configuration","text":"The below configuration now has a valid module configuration so the test will pass. { \"application_profiles\": [ { \"policy_schedule\": \"0 0 * * *\", \"application_name\": \"Test App\", \"criticality\": \"Very High\", \"business_owner\": \"seb\", \"business_owner_email\": \"scoles@veracode.com\", \"upload\": [ { \"location\": \"Assets/verademo.war\" } ], \"modules\": [ { \"module_name\": \"verademo.war\", \"entry_point\": \"true\" }, { \"module_name\": \"JS files within verademo.war\", \"entry_point\": \"true\" } ], \"policy\": { \"custom_severities\": [ { \"cwe\": 0, \"severity\": 0 } ], \"finding_rules\": [ { \"scan_type\": [ \"STATIC\" ], \"type\": \"FAIL_ALL\", \"value\": \"string\" } ], \"scan_frequency_rules\": [ { \"frequency\": \"NOT_REQUIRED\", \"scan_type\": \"STATIC\" } ], \"sev0_grace_period\": 0, \"sev1_grace_period\": 0, \"sev2_grace_period\": 0, \"sev3_grace_period\": 0, \"sev4_grace_period\": 0, \"sev5_grace_period\": 0 }, \"users\": [ { \"first_name\": \"Seb\", \"last_name\": \"Coles\", \"email_address\": \"scoles@veracode.com\", \"roles\": \"Creator, Any Scan\" } ], \"sandboxes\": [ { \"sandbox_name\": \"Release Candidate\" } ], \"mitigations\": [] } ] }","title":"Example Complete Configuration"},{"location":"actions/test/#example-output-for-in-complete-configuration_1","text":"| INFO|Entering Test with scan options {\"LastScan\":false,\"JsonFileLocation\":\".\\\\veracode.complete.json\"} | INFO|Testing configuration for Test App | INFO|Testing against a new scan | INFO|New scan created with Build Id ********. Uploading files | INFO|Uploading Assets/verademo.war to scan ********. | INFO|Upload of Assets/verademo.war complete. | INFO|Scan ******** is still running and has been running for 00:00:02.34. | INFO|Scan ******** is still running and has been running for 00:00:23.83. | INFO|Scan ******** is still running and has been running for 00:00:45.69. | INFO|Scan ******** is still running and has been running for 00:01:07.37. | INFO|Scan ******** is still running and has been running for 00:01:29.26. | INFO|Scan ******** is still running and has been running for 00:01:50.99. | INFO|Scan complete for ******** and took 00:02:12.72. | WARN|PRE SCAN ERRORS: verademo.war:No supporting files or PDB files | WARN|PRE SCAN ERRORS: JS files within verademo.war:No supporting files or PDB files | INFO|Module selection conforms for ******** and the scan can commence. | INFO|Test Finished. Deleting Build Id ********. | INFO|Configuration conforms. | INFO|Application Test App scan config DOES conforms. | INFO|Scan Configuration testing complete. | INFO|Exiting Test with value 1","title":"Example Output for In-Complete Configuration"},{"location":"download/artifactory/","text":"Description Veracode Declare files can also describe the binaries that need to be download for the scan. This is an optional step and requires an auxillary binary to read the configuration and download the artifacts. The Declare Artifactory Provider is available to support artifactory integrations. This release also include the JFrog CLI which pulls the binaries from artifactory as described in the configuration. Setup To use the artifactory provider you must create an Artifactory Access Token that can be used with your instance of artifactory. It will need to have permissions to the artifactory repositories you describe in your configuration. This key needs to be set in the appsettings.json alongside the executable. { \"ArtifactoryUrl\": \"https://__YOUR_ARTIFACTORY_DOMAIN__/artifactory\", \"ArtifactoryApiKey\": \"__YOUR_ARTIFACTORY_ACCESS_TOKEN__\" } note: You must include /artifactory on the end of your artifactory domain. Usage You can then invoke the provider by calling the below command Veracode.OSS.Declare.Artifactory -f __YOUR_DECLARE_CONFIG_FILE__ -t \"Artifactory/\" -t is a target destination for the binary downloads, I would recommend placing this in a folder called Artifactory. Note whatever location you save the artifacts to will need to be reflected in the Declare upload section when running a scan. Example Configuration To use the artifactory provider you must include the below snippet within your Declare configuration file. { \"application_profiles\": [ { \"download\": [ { \"name\": \"artifactory\", \"files\": [ { \"location\": \"__ARTIFACTORY_URL_PATH__\" }, { \"location\": \"mvn-public-local/org/owasp/encoder/encoder/1.2.3/encoder-1.2.3.jar\" } ] } ], } } Example Output for In-Complete Configuration | INFO|Artifactory provider configuration found | INFO|Starting download for mvn-public-local/org/owasp/encoder/encoder/1.2.3/encoder-1.2.3.jar Log path: %USERPROFILE%\\.jfrog\\logs\\jfrog-cli.log { \"status\": \"success\", \"totals\": { \"success\": 1, \"failure\": 0 } } | INFO|Download complete for mvn-public-local/org/owasp/encoder/encoder/1.2.3/encoder-1.2.3.jar","title":"Artifactory"},{"location":"download/artifactory/#description","text":"Veracode Declare files can also describe the binaries that need to be download for the scan. This is an optional step and requires an auxillary binary to read the configuration and download the artifacts. The Declare Artifactory Provider is available to support artifactory integrations. This release also include the JFrog CLI which pulls the binaries from artifactory as described in the configuration.","title":"Description"},{"location":"download/artifactory/#setup","text":"To use the artifactory provider you must create an Artifactory Access Token that can be used with your instance of artifactory. It will need to have permissions to the artifactory repositories you describe in your configuration. This key needs to be set in the appsettings.json alongside the executable. { \"ArtifactoryUrl\": \"https://__YOUR_ARTIFACTORY_DOMAIN__/artifactory\", \"ArtifactoryApiKey\": \"__YOUR_ARTIFACTORY_ACCESS_TOKEN__\" } note: You must include /artifactory on the end of your artifactory domain.","title":"Setup"},{"location":"download/artifactory/#usage","text":"You can then invoke the provider by calling the below command Veracode.OSS.Declare.Artifactory -f __YOUR_DECLARE_CONFIG_FILE__ -t \"Artifactory/\" -t is a target destination for the binary downloads, I would recommend placing this in a folder called Artifactory. Note whatever location you save the artifacts to will need to be reflected in the Declare upload section when running a scan.","title":"Usage"},{"location":"download/artifactory/#example-configuration","text":"To use the artifactory provider you must include the below snippet within your Declare configuration file. { \"application_profiles\": [ { \"download\": [ { \"name\": \"artifactory\", \"files\": [ { \"location\": \"__ARTIFACTORY_URL_PATH__\" }, { \"location\": \"mvn-public-local/org/owasp/encoder/encoder/1.2.3/encoder-1.2.3.jar\" } ] } ], } }","title":"Example Configuration"},{"location":"download/artifactory/#example-output-for-in-complete-configuration","text":"| INFO|Artifactory provider configuration found | INFO|Starting download for mvn-public-local/org/owasp/encoder/encoder/1.2.3/encoder-1.2.3.jar Log path: %USERPROFILE%\\.jfrog\\logs\\jfrog-cli.log { \"status\": \"success\", \"totals\": { \"success\": 1, \"failure\": 0 } } | INFO|Download complete for mvn-public-local/org/owasp/encoder/encoder/1.2.3/encoder-1.2.3.jar","title":"Example Output for In-Complete Configuration"},{"location":"integrations/docker/","text":"Docker","title":"Docker"},{"location":"integrations/github/","text":"GitHub","title":"GitHub"},{"location":"integrations/jenkins/","text":"Jenkins","title":"Jenkins"},{"location":"integrations/teamcity/","text":"TeamCity","title":"Docker"},{"location":"support/logging/","text":"Logging","title":"Logging"},{"location":"support/reporting/","text":"Reporting","title":"Reporting"},{"location":"support/troubleshooting/","text":"Troubleshooting","title":"Troubleshooting"}]}